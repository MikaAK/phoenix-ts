/** Declaration file generated by dts-gen */

export class Channel {
    constructor(topic: any, params: any, socket: any);

    canPush(): any;

    isClosed(): any;

    isErrored(): any;

    isJoined(): any;

    isJoining(): any;

    isLeaving(): any;

    isMember(topic: any): any;

    join(...args: any[]): any;

    joinRef(): any;

    leave(...args: any[]): any;

    off(event: any): any;

    on(event: any, callback: (payload: any) => any): void;

    onClose(callback: Function): void;

    onError(callback: Function): any;

    onMessage(event: any, payload: any, ref: any): any;

    push(event: any, payload: any, ...args: any[]): any;

    rejoin(...args: any[]): void;

    rejoinUntilConnected(): void;

    replyEventName(ref: any): any;

    sendJoin(timeout: any): void;

    trigger(event: any, payload: any, ref: any): any;

}

export class LongPoll {
    constructor(endPoint: any);

    close(code: any, reason: any): void;

    closeAndRetry(): void;

    endpointURL(): any;

    normalizeEndpoint(endPoint: any): any;

    ontimeout(): void;

    poll(): any;

    send(body: any): void;

}

export class Socket {
    constructor(endPoint: any, ...args: any[]);

    channel(topic: any, ...args: any[]): any;

    connect(params?: any): any;

    connectionState(): any;

    disconnect(callback: Function, code: any, reason: any): void;

    endPointURL(): any;

    flushSendBuffer(): any;

    isConnected(): any;

    log(kind: any, msg: any, data: any): void;

    makeRef(): any;

    onClose(callback: Function): void;

    onConnClose(event: any): any;

    onConnError(error: any): any;

    onConnMessage(rawMessage: any): any;

    onConnOpen(): any;

    onError(callback: Function): void;

    onMessage(callback: (event?: string, payload?: any, ref?: any) => any): void;

    onOpen(callback: Function): void;

    protocol(): any;

    push(data: any): void;

    remove(channel: any): any;

    sendHeartbeat(): void;

    triggerChanError(): any;

}


