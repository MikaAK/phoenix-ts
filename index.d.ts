/** Declaration file generated by dts-gen */

export class Channel {
    constructor(topic: any, params: any, socket: any);

    canPush(): any;

    isClosed(): any;

    isErrored(): any;

    isJoined(): any;

    isJoining(): any;

    isLeaving(): any;

    isMember(topic: any): any;

    join(...args: any[]): any;

    joinRef(): any;

    leave(...args: any[]): any;

    off(event: any): any;

    on(event: any, callback: any): void;

    onClose(callback: any): void;

    onError(callback: any): any;

    onMessage(event: any, payload: any, ref: any): any;

    push(event: any, payload: any, ...args: any[]): any;

    rejoin(...args: any[]): void;

    rejoinUntilConnected(): void;

    replyEventName(ref: any): any;

    sendJoin(timeout: any): void;

    trigger(event: any, payload: any, ref: any): any;

}

export class LongPoll {
    constructor(endPoint: any);

    close(code: any, reason: any): void;

    closeAndRetry(): void;

    endpointURL(): any;

    normalizeEndpoint(endPoint: any): any;

    ontimeout(): void;

    poll(): any;

    send(body: any): void;

}

export class Socket {
    constructor(endPoint: any, ...args: any[]);

    channel(topic: any, ...args: any[]): any;

    connect(params: any): any;

    connectionState(): any;

    disconnect(callback: any, code: any, reason: any): void;

    endPointURL(): any;

    flushSendBuffer(): any;

    isConnected(): any;

    log(kind: any, msg: any, data: any): void;

    makeRef(): any;

    onClose(callback: any): void;

    onConnClose(event: any): any;

    onConnError(error: any): any;

    onConnMessage(rawMessage: any): any;

    onConnOpen(): any;

    onError(callback: any): void;

    onMessage(callback: any): void;

    onOpen(callback: any): void;

    protocol(): any;

    push(data: any): void;

    remove(channel: any): any;

    sendHeartbeat(): void;

    triggerChanError(): any;

}

export function Ajax(): void;

export namespace Ajax {
    const prototype: {
    };

    const states: {
        complete: number;
    };

    function appendParams(url: any, params: any): any;

    function parseJSON(resp: any): any;

    function request(method: any, endPoint: any, accept: any, body: any, timeout: any, ontimeout: any, callback: any): void;

    function serialize(obj: any, parentKey: any): any;

    function xdomainRequest(req: any, method: any, endPoint: any, body: any, timeout: any, ontimeout: any, callback: any): void;

    function xhrRequest(req: any, method: any, endPoint: any, accept: any, body: any, timeout: any, ontimeout: any, callback: any): void;

    namespace appendParams {
        const prototype: {
        };

    }

    namespace parseJSON {
        const prototype: {
        };

    }

    namespace request {
        const prototype: {
        };

    }

    namespace serialize {
        const prototype: {
        };

    }

    namespace xdomainRequest {
        const prototype: {
        };

    }

    namespace xhrRequest {
        const prototype: {
        };

    }

}

export namespace Channel {
    namespace prototype {
        function canPush(): any;

        function isClosed(): any;

        function isErrored(): any;

        function isJoined(): any;

        function isJoining(): any;

        function isLeaving(): any;

        function isMember(topic: any): any;

        function join(...args: any[]): any;

        function joinRef(): any;

        function leave(...args: any[]): any;

        function off(event: any): any;

        function on(event: any, callback: any): void;

        function onClose(callback: any): void;

        function onError(callback: any): any;

        function onMessage(event: any, payload: any, ref: any): any;

        function push(event: any, payload: any, ...args: any[]): any;

        function rejoin(...args: any[]): void;

        function rejoinUntilConnected(): void;

        function replyEventName(ref: any): any;

        function sendJoin(timeout: any): void;

        function trigger(event: any, payload: any, ref: any): any;

        namespace canPush {
            const prototype: {
            };

        }

        namespace isClosed {
            const prototype: {
            };

        }

        namespace isErrored {
            const prototype: {
            };

        }

        namespace isJoined {
            const prototype: {
            };

        }

        namespace isJoining {
            const prototype: {
            };

        }

        namespace isLeaving {
            const prototype: {
            };

        }

        namespace isMember {
            const prototype: {
            };

        }

        namespace join {
            const prototype: {
            };

        }

        namespace joinRef {
            const prototype: {
            };

        }

        namespace leave {
            const prototype: {
            };

        }

        namespace off {
            const prototype: {
            };

        }

        namespace on {
            const prototype: {
            };

        }

        namespace onClose {
            const prototype: {
            };

        }

        namespace onError {
            const prototype: {
            };

        }

        namespace onMessage {
            const prototype: {
            };

        }

        namespace push {
            const prototype: {
            };

        }

        namespace rejoin {
            const prototype: {
            };

        }

        namespace rejoinUntilConnected {
            const prototype: {
            };

        }

        namespace replyEventName {
            const prototype: {
            };

        }

        namespace sendJoin {
            const prototype: {
            };

        }

        namespace trigger {
            const prototype: {
            };

        }

    }

}

export namespace LongPoll {
    namespace prototype {
        function close(code: any, reason: any): void;

        function closeAndRetry(): void;

        function endpointURL(): any;

        function normalizeEndpoint(endPoint: any): any;

        function ontimeout(): void;

        function poll(): any;

        function send(body: any): void;

        namespace close {
            const prototype: {
            };

        }

        namespace closeAndRetry {
            const prototype: {
            };

        }

        namespace endpointURL {
            const prototype: {
            };

        }

        namespace normalizeEndpoint {
            const prototype: {
            };

        }

        namespace ontimeout {
            const prototype: {
            };

        }

        namespace poll {
            const prototype: {
            };

        }

        namespace send {
            const prototype: {
            };

        }

    }

}

export namespace Presence {
    function clone(obj: any): any;

    function list(presences: any, chooser: any): any;

    function map(obj: any, func: any): any;

    function syncDiff(currentState: any, _ref2: any, onJoin: any, onLeave: any): any;

    function syncState(currentState: any, newState: any, onJoin: any, onLeave: any): any;

    namespace clone {
        const prototype: {
        };

    }

    namespace list {
        const prototype: {
        };

    }

    namespace map {
        const prototype: {
        };

    }

    namespace syncDiff {
        const prototype: {
        };

    }

    namespace syncState {
        const prototype: {
        };

    }

}

export namespace Socket {
    namespace prototype {
        function channel(topic: any, ...args: any[]): any;

        function connect(params: any): any;

        function connectionState(): any;

        function disconnect(callback: any, code: any, reason: any): void;

        function endPointURL(): any;

        function flushSendBuffer(): any;

        function isConnected(): any;

        function log(kind: any, msg: any, data: any): void;

        function makeRef(): any;

        function onClose(callback: any): void;

        function onConnClose(event: any): any;

        function onConnError(error: any): any;

        function onConnMessage(rawMessage: any): any;

        function onConnOpen(): any;

        function onError(callback: any): void;

        function onMessage(callback: any): void;

        function onOpen(callback: any): void;

        function protocol(): any;

        function push(data: any): void;

        function remove(channel: any): any;

        function sendHeartbeat(): void;

        function triggerChanError(): any;

        namespace channel {
            const prototype: {
            };

        }

        namespace connect {
            const prototype: {
            };

        }

        namespace connectionState {
            const prototype: {
            };

        }

        namespace disconnect {
            const prototype: {
            };

        }

        namespace endPointURL {
            const prototype: {
            };

        }

        namespace flushSendBuffer {
            const prototype: {
            };

        }

        namespace isConnected {
            const prototype: {
            };

        }

        namespace log {
            const prototype: {
            };

        }

        namespace makeRef {
            const prototype: {
            };

        }

        namespace onClose {
            const prototype: {
            };

        }

        namespace onConnClose {
            const prototype: {
            };

        }

        namespace onConnError {
            const prototype: {
            };

        }

        namespace onConnMessage {
            const prototype: {
            };

        }

        namespace onConnOpen {
            const prototype: {
            };

        }

        namespace onError {
            const prototype: {
            };

        }

        namespace onMessage {
            const prototype: {
            };

        }

        namespace onOpen {
            const prototype: {
            };

        }

        namespace protocol {
            const prototype: {
            };

        }

        namespace push {
            const prototype: {
            };

        }

        namespace remove {
            const prototype: {
            };

        }

        namespace sendHeartbeat {
            const prototype: {
            };

        }

        namespace triggerChanError {
            const prototype: {
            };

        }

    }

}

